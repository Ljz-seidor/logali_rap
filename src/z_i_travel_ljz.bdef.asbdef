managed;
//strict ( 2 ); //Uncomment this line in order to enable strict mode 2. The strict mode has two variants (strict(1), strict(2)) and is prerequisite to be future proof regarding syntax and to be able to release your BO.

//******** Travel ********/
define behavior for Z_I_TRAVEL_LJZ alias Travel
implementation in class zbp_i_travel_ljz unique
persistent table ztravel_ljz
with additional save
lock master
authorization master ( instance )
etag master LastChangedAt
{
  // Fields
  // Administrative fields: read only
  field ( readonly ) LastChangedAt, LastChangedBy, CreatedAt, CreatedBy;
  //Mandatory fields that are required to create a travel
  field ( mandatory : create ) TravelId, AgencyId, OverallStatus, BookingFee, CurrencyCode;
  field ( features : instance ) TravelId, OverallStatus;
  //  field (numbering : managed) TravelId;

  //Operaciones
  create;
  update;
  delete;

  //Validaciones
  validation validateCustomer on save { create; field CustomerId; }
  validation validateDates on save { create; field BeginDate, EndDate; }
  validation validateStatus on save { create; field OverallStatus; }

  //Acciones
  action ( features : instance ) acceptTravel result [1] $self;
  action ( features : instance ) rejectTravel result [1] $self;
  action createTravelByTemplate result [1] $self;

  //Asociaciones
  association _Booking { create ( features: instance ); }

  //Mapeo: CDS vs Tabla Z
  //  mapping for ztravel_ljz corresponding;
  mapping for ztravel_ljz
    {
      TravelId      = travel_id;
      AgencyId      = agency_id;
      CustomerId    = customer_id;
      BeginDate     = begin_date;
      EndDate       = end_date;
      BookingFee    = booking_fee;
      TotalPrice    = total_price;
      CurrencyCode  = currency_code;
      Description   = description;
      OverallStatus = overall_status;
      CreatedBy     = created_by;
      CreatedAt     = created_at;
      LastChangedBy = last_changed_by;
      LastChangedAt = last_changed_at;
    }

}

//******** BOOKING ********/
define behavior for Z_I_BOOKING_LJZ alias Booking
implementation in class zbp_i_booking_ljz unique
persistent table zbooking_ljz
lock dependent by _Travel
authorization dependent by _Travel
etag master LastChangedAt
{

  //Fields
  //Static fields control
  field ( readonly ) TravelId; //, BookingId;
  //Mandatory Fields
  field ( mandatory : create ) BookingId, CarrierId, ConnectionId, FlightDate, BookingStatus;

  //Operaciones
  update;
  delete;

  //Validaciones
  validation validateStatus on save { create; field BookingStatus; }

  //Asociaciones
  association _Travel;
  association _BookingSupplement { create ( features: instance ); }

  //Determinaciones: funciones que se ejecutan al momento de modificacion o guardado
  determination calculateTotalFlightPrice on modify { field FlightPrice, CurrencyCode; }

  //Mapeo
  mapping for zbooking_ljz
    {
      TravelId      = travel_id;
      BookingId     = booking_id;
      BookingDate   = booking_date;
      CustomerId    = customer_id;
      CarrierId     = carrier_id;
      ConnectionId  = connection_id;
      FlightDate    = flight_date;
      FlightPrice   = flight_price;
      CurrencyCode  = currency_code;
      BookingStatus = booking_status;
      LastChangedAt = last_changed_at;
    }


}

//******** Supplements ********/
define behavior for Z_I_BOOKSUPPL_LJZ alias Supplement
implementation in class zbp_i_booksuppl_ljz unique
//persistent table zbooksuppl_ljz
with unmanaged save
lock dependent by _Travel
authorization dependent by _Travel
etag master LastChangedAt
{

  //Operaciones
  update;
  delete;

  //Campos
  field ( readonly ) TravelId, BookingId; //, BookingSupplementId;
  field ( mandatory : create ) SupplementId, Price;

  //Asociaciones
  association _Travel;
  association _Booking;

  //Determinaciones
  determination calculateTotalSupplPrice on modify { field Price, CurrencyCode; }

  //Mapeo
  mapping for zlog_ljz
    {
      TravelId = travel_id;
    }
}